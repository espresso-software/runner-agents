# This is a basic workflow to help you get started with Actions

name: Builder Image
permissions:
  contents: read
  pull-requests: read
  issues: write

# Controls when the workflow will run
on:
  push:
    branches-ignore:
      - main
    paths:
      - builder/**
      - .github/workflows/builder.yml
      # Uncomment below for deployment feature development
      # - roles/deploy/**
      # - deploy.yml
  pull_request:
    branches:
      - main
    paths:
      - builder/**
      - deploy.yml
      - docker.yml
      - .github/workflows/builder.yml
      - roles/deploy/**
  schedule:
    - cron: '0 12 * * 6'

env:
  DOCKER_REPOSITORY: coffee206/github-actions
  BUILD_DIR: builder
  STATEFUL_SET_NAME: builder

jobs:
  versioning:
    runs-on:
      - self-hosted
      - docker
    outputs:
      x64_tag: x64-builder-${{ env.IMAGE_VERSION }}
      arm64_tag: arm64-builder-${{ env.IMAGE_VERSION }}
      common_tag: builder-${{ env.IMAGE_VERSION }}
    
    steps:
      - uses: actions/checkout@v2
      - uses: espresso-software/actions/common/versioning@main
        id: get_version
        with:
          version_file: builder/version.json
  
  arm64-build:
    needs:
      - versioning
    runs-on:
      - self-hosted
      - docker
      - ARM64 
    steps:
      - uses: actions/checkout@v2

      - name: Build and publish image
        uses: espresso-software/actions/docker/build-and-push@main
        with:
          repository: ${{ env.DOCKER_REPOSITORY }}
          tag: ${{ needs.versioning.outputs.arm64_tag }}.SNAPSHOT
          build_dir: ${{ env.BUILD_DIR }}
        env:
          DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PAT }}
  
  x64-build:   
    needs:
      - versioning
    runs-on:
      - self-hosted
      - docker
      - x64   
    steps:
      - uses: actions/checkout@v2
      - name: Build and publish image
        uses: espresso-software/actions/docker/build-and-push@feature/docker-actions
        with:
          repository: ${{ env.DOCKER_REPOSITORY }}
          tag: ${{ needs.versioning.outputs.x64_tag }}.SNAPSHOT
          build_dir: ${{ env.BUILD_DIR }}
        env:
          DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PAT }}

  uat-deploy:
    if: github.event.pull_request || github.event_name == 'schedule'
    needs: 
      - versioning
      - x64-build
    runs-on:
      - self-hosted
      - ansible
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          token: ${{ secrets.READ_ACCESS_TOKEN }}
      - name: Cleanup uat
        uses: espresso-software/actions/ansible/run-playbook@main
        env:
          VAULT_DECRYPT_TOKEN: ${{ secrets.VAULT_DECRYPT_TOKEN }}
        with:
          playbook_path: cleanup.yml
          inventory_path: inventory/hosts.ini
          vars: stateful_set_name=uat-${{ env.STATEFUL_SET_NAME }}
      - name: Install docker
        uses: espresso-software/actions/ansible/run-playbook@main
        env:
          VAULT_DECRYPT_TOKEN: ${{ secrets.VAULT_DECRYPT_TOKEN }}
        with:
          playbook_path: docker.yml
          inventory_path: inventory/hosts.ini
      - name: Deploy x64 image
        uses: espresso-software/actions/ansible/run-playbook@main
        env:
          VAULT_DECRYPT_TOKEN: ${{ secrets.VAULT_DECRYPT_TOKEN }}
        with:
          playbook_path: deploy.yml
          inventory_path: inventory/hosts.ini
          vars: stateful_set_name=uat-${{ env.STATEFUL_SET_NAME }} tag=${{ needs.versioning.outputs.x64_tag }}.SNAPSHOT arch=amd64 labels=uat

  promote: 
    needs: 
      - versioning
      - x64-build
      - arm64-build
      - uat-deploy
    runs-on:
      - self-hosted
      - docker
    env:
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PAT }}
    steps:
      - name: Promote x64 image
        uses: espresso-software/actions/docker/promote@main
        with:
          repository: ${{ env.DOCKER_REPOSITORY }}
          old_tag: ${{ needs.versioning.outputs.x64_tag }}.SNAPSHOT
          promote_tag: ${{ needs.versioning.outputs.x64_tag }}
          skip_cleanup: 'true'
      
      - name: Promote arm64 image
        uses: espresso-software/actions/docker/promote@main
        with:
          repository: ${{ env.DOCKER_REPOSITORY }}
          old_tag: ${{ needs.versioning.outputs.arm64_tag }}.SNAPSHOT
          promote_tag: ${{ needs.versioning.outputs.arm64_tag }}
          skip_cleanup: 'true'
      
      - name: Create release manifest
        uses: espresso-software/actions/docker/common-tag@main
        with:
          repository: ${{ env.DOCKER_REPOSITORY }}
          tag: ${{ needs.versioning.outputs.common_tag }}
          x64_tag: ${{ needs.versioning.outputs.x64_tag }}
          arm64_tag: ${{ needs.versioning.outputs.arm64_tag }}
      
      - name: Create latest manifest
        uses: espresso-software/actions/docker/common-tag@main
        with:
          repository: ${{ env.DOCKER_REPOSITORY }}
          tag: latest
          x64_tag: ${{ needs.versioning.outputs.x64_tag }}
          arm64_tag: ${{ needs.versioning.outputs.arm64_tag }}
  
  uat-cleanup:
    needs:
      - uat-deploy
    runs-on:
      - self-hosted
      - ansible
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          token: ${{ secrets.READ_ACCESS_TOKEN }}
      - uses: espresso-software/actions/ansible/run-playbook@main
        env:
          VAULT_DECRYPT_TOKEN: ${{ secrets.VAULT_DECRYPT_TOKEN }}
        with:
          playbook_path: cleanup.yml
          inventory_path: inventory/hosts.ini
          vars: stateful_set_name=uat-${{ env.STATEFUL_SET_NAME }}

  deploy:
    if: github.event.pull_request || github.event_name == 'schedule'
    needs: 
      - versioning
      - promote
      - x64-build
      - arm64-build
      - uat-deploy
    runs-on:
      - self-hosted
      - ansible
    env:
      COMMON_ARGS: tag=${{ needs.versioning.outputs.common_tag }} cpu_limits=2000m mem_limits=4Gi mem_requests=512Mi
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          token: ${{ secrets.READ_ACCESS_TOKEN }}
      - name: Arm64 deploy
        uses: espresso-software/actions/ansible/run-playbook@main
        env:
          VAULT_DECRYPT_TOKEN: ${{ secrets.VAULT_DECRYPT_TOKEN }}
        with:
          playbook_path: deploy.yml
          inventory_path: inventory/hosts.ini
          vars: stateful_set_name=arm64-${{ env.STATEFUL_SET_NAME }} arch=arm64 replicas=2 ${{ env.COMMON_ARGS }} 
      - name: x64 deploy
        uses: espresso-software/actions/ansible/run-playbook@main
        env:
          VAULT_DECRYPT_TOKEN: ${{ secrets.VAULT_DECRYPT_TOKEN }}
        with:
          playbook_path: deploy.yml
          inventory_path: inventory/hosts.ini
          vars: stateful_set_name=x64-${{ env.STATEFUL_SET_NAME }} arch=amd64 replicas=2 ${{ env.COMMON_ARGS }}